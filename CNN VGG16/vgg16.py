# -*- coding: utf-8 -*-
"""VGG16.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-yld07Efc-cIfaY5ChhjOEoyyx8UXQte
"""

from google.colab import drive
drive.mount('/content/gdrive', force_remount=True)

from keras.layers import Input, Lambda, Dense, Flatten
from keras.models import Model
#from keras.applications.resnet50 import ResNet50
from keras.applications.vgg16 import VGG16
from keras.applications.vgg16 import preprocess_input
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
import numpy as np
from glob import glob
import matplotlib.pyplot as plt
# Desde keras importamos en Modelo VGG16. Esto es un modelo de red neuronal convolucional previamente entrenada con DB Imagenet
# Importamos Vgg16 modelo de red neuronal; el algoritmo para la deteccion de imagenes es generico y se puede utilizar con otros modelos pre-entrenados.

# Redimensionar el tama単o de todas las imagenes que se encuentran en las carpetas de entrenamiento y prueba
# Recordemos que el tama単o predeterminado para este modelo es 224x224.
IMAGE_SIZE = [224, 224]

train_path = '/content/gdrive/MyDrive/Dataset/Entrenamiento/'
valid_path = '/content/gdrive/MyDrive/Dataset/Prueba/'

# Importa la libreria VGG 16 y se incluye la capa de preprocesamiento al frente de VGG16
# Aqui utilizaremos los pesos de Imagenet

vgg = VGG16(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)

# Bucle para no entrenar los pesos existentes
for layer in vgg.layers:
    layer.trainable = False

# Con funcion glob el numero de clases de salida
folders = glob('/content/gdrive/MyDrive/Dataset/Entrenamiento/*')

# Nuestras capas
x = Flatten()(vgg.output)

prediction = Dense(len(folders), activation='softmax')(x)

# Crea un objeto modelo
model = Model(inputs=vgg.input, outputs=prediction)

# Vista de la estructura del modelo
model.summary()

# Aqui le decimos al modelo con que metodo de costo y optmizacion utilizaremos

model.compile(
  loss='categorical_crossentropy',
  optimizer='adam',
  metrics=['accuracy']
)

# Usaremos el generador de Datos de Imagenes para importar datos del dataset
from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

# La clase train_datagen nos permite leer las imagenes que se encuentran en las carpetas.
# Aseguremos proporcionar el mismo tama単o del destino que el inicializdo para el tama単o de imagen.

training_set = train_datagen.flow_from_directory('/content/gdrive/MyDrive/Dataset/Entrenamiento/',
                                                 target_size = (224, 224),
                                                 batch_size = 32,
                                                 class_mode = 'categorical')

test_set = test_datagen.flow_from_directory('/content/gdrive/MyDrive/Dataset/Prueba/',
                                            target_size = (224, 224),
                                            batch_size = 32,
                                            class_mode = 'categorical')

# Ajustamos el modelo
# Ejecutamos con 5 epocas. Esto demara aproximadamente 10h.
r = model.fit_generator(
  training_set,
  validation_data=test_set,
  epochs=5,
  steps_per_epoch=len(training_set),
  validation_steps=len(test_set)
)

# Diagramar las perdidas
plt.plot(r.history['loss'], label='train loss')
plt.plot(r.history['val_loss'], label='val loss')
plt.legend()
plt.show()
plt.savefig('LossVal_loss')

# plot the accuracy
#plt.plot(r.history['acc1'], label='train acc')
#plt.plot(r.history['val_acc'], label='val acc')
#plt.legend()
#plt.show()
#plt.savefig('AccVal_acc')

import tensorflow as tf

from keras.models import load_model

model.save('/content/gdrive/MyDrive/Prediccion Cancer Pulmon con VGG16/model_vgg16.h5') #model.save('model_vgg16.h5')
# Guardamos el modelo en archivos con extension .h5

